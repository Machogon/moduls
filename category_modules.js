// ==================================================
// –ú–û–î–£–õ–ò –ö–ê–¢–ï–ì–û–†–ò–ô –î–õ–Ø –°–ö–†–ò–ü–¢–ê AUTOPART
// –§–æ—Ä–º–∞—Ç: 
//   –ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–∂–¥—É // ====== –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
//   –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
// ==================================================

const categoryModules = {

// ==================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø: –ö–æ–º–ø–ª–µ–∫—Ç—É—é—á—ñ —Å—Ç–∞—Ä—Ç–µ—Ä—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤
// ==================================================
"–ö–æ–º–ø–ª–µ–∫—Ç—É—é—á—ñ —Å—Ç–∞—Ä—Ç–µ—Ä—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤": {
    parameters: {
        "251185": {
            "–®–∫–∏–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["—à–∫–∏–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "—à–∫–∏—Ñ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "—à–∫–∏–≤ –≥–µ–Ω–∏—Ä–∞—Ç–æ—Ä–∞", "–º—É—Ñ—Ç–∞", "—à–∫—ñ–≤ —Ä–µ–º–µ–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"],
            "–†–æ—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["—Ä–æ—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "—Ä–æ—Ç–∞—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"],
            "–†–æ—Ç–æ—Ä —Å—Ç–∞—Ä—Ç–µ—Ä–∞": ["—Ä–æ—Ç–æ—Ä —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "—Ä–æ—Ç–∞—Ä —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "—è–∫—ñ—Ä —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–°—Ç–∞—Ç–æ—Ä —Å—Ç–∞—Ä—Ç–µ—Ä–∞": ["—Å—Ç–∞—Ç–æ—Ä —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "–æ–±–º–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–°—Ç–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["—Å—Ç–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "–æ–±–º–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"],
            "–í—Ç—è–≥–∏–≤–∞—é—â–∏–µ —Ä–µ–ª–µ": ["–≤—Ç—è–≥–∏–≤–∞—é—â–∏–µ —Ä–µ–ª–µ", "–≤—Ç—è–≥–∏–≤–∞—é—â–µ–µ —Ä–µ–ª–µ", "—Ä–µ–ª–µ –≤—Ç—è–≥—É—é—á–µ —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "–∫–æ–Ω—Ç–∞–∫—Ç –≤—Ç—è–≥—É—é—á–æ–≥–æ —Ä–µ–ª–µ"],
            "–ë–µ–Ω–¥–∏–∫—Å—ã": ["–±–µ–Ω–¥–∏–∫—Å", "bendix", "—à–µ—Å—Ç–µ—Ä–Ω—è –±–µ–Ω–¥–∏–∫—Å–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "—Ä–æ–ª–∏–∫ –±–µ–Ω–¥–∏–∫—Å–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–†–µ–≥—É–ª—è—Ç–æ—Ä—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è": ["—Ä–µ–≥—É–ª—è—Ç–æ—Ä –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è", "—Ä–µ–≥—É–ª—è—Ç–æ—Ä –Ω–∞–ø—Ä—É–≥–∏"],
            "–©–µ—Ç–∫–∏ —Å—Ç–∞—Ä—Ç–µ—Ä–æ–≤": ["—â–µ—Ç–∫–∏ —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "—â–µ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "—â—ñ—Ç–∫–æ—Ç—Ä–∏–º–∞—á —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "—â—ñ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–©–µ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤": ["—â–µ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "—â–µ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "—â—ñ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"],
            "–ú–µ—Ö–∞–Ω–∏–∑–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ö–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["–º–µ—Ö–∞–Ω–∏–∑–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ö–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "–º–µ—Ö–∞–Ω–∏–∑–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ö–æ–¥–∞"],
            "–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["–∫–æ–ª–ª–µ–∫—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"],
            "–©–µ—Ç–æ—á–Ω—ã–π —É–∑–µ–ª —Å—Ç–∞—Ä—Ç–µ—Ä–∞": ["—â–µ—Ç–æ—á–Ω—ã–π —É–∑–µ–ª —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "—â—ñ—Ç–∫–æ—Ç—Ä–∏–º–∞—á —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–ü–æ–¥—à–∏–ø–Ω–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["–ø–æ–¥—à–∏–ø–Ω–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "–ø–æ–¥—à–∏–ø–Ω–∏–∫"],
            "–í—Ç—É–ª–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞": ["–≤—Ç—É–ª–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–ö—Ä—ã—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["–∫—Ä—ã—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "–∫—Ä–∏—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"],
            "–ë–æ–ª—Ç –∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["–±–æ–ª—Ç –∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", "—à–∞–π–±–∏ —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–†–µ–¥—É–∫—Ç–æ—Ä—ã —Å—Ç–∞—Ä—Ç–µ—Ä–∞": ["—Ä–µ–¥—É–∫—Ç–æ—Ä —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "—Ä–µ–¥—É–∫—Ç–æ—Ä –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω–∏–π", "–∫—ñ–ª—å—Ü–µ –º–µ—Ç–∞–ª–µ–≤–µ —Å—Ç–æ–ø–æ—Ä–Ω–µ", "–∑—É–±—á–∞—Å—Ç–µ –∫–æ–ª–µ—Å–æ —Ä–µ–¥—É–∫—Ç–æ—Ä–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–©–µ—Ç–æ—á–Ω—ã–µ —É–∑–ª—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["—â–µ—Ç–æ—á–Ω—ã–π —É–∑–µ–ª –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"],
            "–ö—Ä—ã—à–∫–∏ —Å—Ç–∞—Ä—Ç–µ—Ä–∞": ["–∫—Ä–∏—à–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞"],
            "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["–∫—Ä–æ–Ω—à—Ç–µ–π–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"],
            "–î–∏–æ–¥–Ω—ã–µ –º–æ—Å—Ç—ã": ["–¥–∏–æ–¥–Ω—ã–π –º–æ—Å—Ç", "–¥–∏–æ–¥ –º–æ—Å—Ç", "–≤–∏–ø—Ä—è–º–ª—è—á –¥—ñ–æ–¥–Ω–∏–π"],
            "–í–∏–ª–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞": ["–≤–∏–ª–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞", "–≤–∞–∂—ñ–ª—å —Å—Ç–∞—Ä—Ç–µ—Ä–∞"]
        }
    },
    
    determineValues: function(title) {
        if (!window.isScriptRunning) return null;
        const result = {};
        for (const [paramId, mappings] of Object.entries(this.parameters)) {
            for (const [value, keywords] of Object.entries(mappings)) {
                for (const keyword of keywords) {
                    if (title.includes(keyword)) {
                        console.log(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: "${value}" –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ${paramId} –≤ "${title}" (–∫–ª—é—á: "${keyword}")`);
                        result[paramId] = value;
                        break;
                    }
                }
                if (result[paramId]) break;
            }
        }
        return Object.keys(result).length > 0 ? result : null;
    },
    
    process: function() {
        console.log("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—á—ñ —Å—Ç–∞—Ä—Ç–µ—Ä—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤'");
        const productName = document.querySelector("input[name='name']").value.toLowerCase();
        const params = this.determineValues(productName);
        if (!params) {
            console.log("‚ö† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.");
            window.goToNextProduct();
            return;
        }

        const paramIds = Object.keys(params);
        let index = 0;

        function addNext() {
            if (index >= paramIds.length) {
                window.goToNextProduct();
                return;
            }
            const paramId = paramIds[index];
            if (!window.checkIfParameterExists(paramId, params[paramId])) {
                window.addParameter(paramId, params[paramId], () => {
                    index++;
                    addNext();
                });
            } else {
                index++;
                addNext();
            }
        }
        addNext();
    }
},

// ==================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø: –°–∞–π–ª–µ–Ω—Ç–±–ª–æ–∫–∏ –ø–æ–¥–≤–µ—Å–∫–∏
// ==================================================
"–°–∞–π–ª–µ–Ω—Ç–±–ª–æ–∫–∏ –ø–æ–¥–≤–µ—Å–∫–∏": {
    parameters: {
        "122846": {
            "–ü–µ—Ä–µ–¥–Ω—è—è": ["–ø–µ—Ä–µ–¥–Ω—è—è", "–ø–µ—Ä–µ–¥–Ω—ñ", "front"],
            "–ó–∞–¥–Ω—è—è": ["–∑–∞–¥–Ω—è—è", "–∑–∞–¥–Ω—ñ", "rear"]
        },
        "122881": {
            "–°–ª–µ–≤–∞": ["—Å–ª–µ–≤–∞", "–ª—ñ–≤–æ—Ä—É—á", "left"],
            "–°–ø—Ä–∞–≤–∞": ["—Å–ø—Ä–∞–≤–∞", "–ø—Ä–∞–≤–æ—Ä—É—á", "right"]
        },
        "173460": {
            "–†–µ—Å—Å–æ—Ä—ã": ["—Ä–µ—Å—Å–æ—Ä—ã", "—Ä–µ—Å—Å–æ—Ä–∞"],
            "–†—ã—á–∞–≥–∏": ["—Ä—ã—á–∞–≥–∏", "—Ä—ã—á–∞–≥"],
            "–¢—è–≥–∏": ["—Ç—è–≥–∏", "—Ç—è–≥–∞"],
            "–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã": ["–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã", "–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä"],
            "–°—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä—ã": ["—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä—ã", "—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä"],
            "–†—É–ª–µ–≤—ã–µ —Ä–µ–π–∫–∏": ["—Ä—É–ª–µ–≤—ã–µ —Ä–µ–π–∫–∏", "—Ä—É–ª–µ–≤–∞—è —Ä–µ–π–∫–∞"],
            "–ë–∞–ª–∫–∏": ["–±–∞–ª–∫–∏", "–±–∞–ª–∫–∞"]
        },
        "173478": {
            "–ü–æ–ª–∏—É—Ä–µ—Ç–∞–Ω": ["–ø–æ–ª–∏—É—Ä–µ—Ç–∞–Ω", "–ø–æ–ª—ñ—É—Ä–µ—Ç–∞–Ω"]
        }
    },
    
    determineValues: function(title) {
        if (!window.isScriptRunning) return null;
        const result = {};
        for (const [paramId, mappings] of Object.entries(this.parameters)) {
            for (const [value, keywords] of Object.entries(mappings)) {
                for (const keyword of keywords) {
                    if (title.includes(keyword)) {
                        console.log(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: "${value}" –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ${paramId} –≤ "${title}" (–∫–ª—é—á: "${keyword}")`);
                        result[paramId] = value;
                        break;
                    }
                }
                if (result[paramId]) break;
            }
        }
        return Object.keys(result).length > 0 ? result : null;
    },
    
    process: function() {
        console.log("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–°–∞–π–ª–µ–Ω—Ç–±–ª–æ–∫–∏ –ø–æ–¥–≤–µ—Å–∫–∏'");
        const productName = document.querySelector("input[name='name']").value.toLowerCase();
        const params = this.determineValues(productName);
        if (!params) {
            console.log("‚ö† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.");
            window.goToNextProduct();
            return;
        }

        const paramIds = Object.keys(params);
        let index = 0;

        function addNext() {
            if (index >= paramIds.length) {
                window.goToNextProduct();
                return;
            }
            const paramId = paramIds[index];
            if (!window.checkIfParameterExists(paramId, params[paramId])) {
                window.addParameter(paramId, params[paramId], () => {
                    index++;
                    addNext();
                });
            } else {
                index++;
                addNext();
            }
        }
        addNext();
    }
},

// ==================================================
// –ö–ê–¢–ï–ì–û–†–ò–Ø: –¢–æ—Ä–º–æ–∑–Ω—ã–µ —à–ª–∞–Ω–≥–∏ –∏ —Ç—Ä—É–±–∫–∏
// ==================================================
"–¢–æ—Ä–º–æ–∑–Ω—ã–µ —à–ª–∞–Ω–≥–∏ –∏ —Ç—Ä—É–±–∫–∏": {
    parameters: {
        "122846": {
            "–ü–µ—Ä–µ–¥–Ω—è—è": ["–ø–µ—Ä–µ–¥–Ω—è—è", "–ø–µ—Ä–µ–¥–Ω—ñ", "front", "–ø–µ—Ä–µ–¥"],
            "–ó–∞–¥–Ω—è—è": ["–∑–∞–¥–Ω—è—è", "–∑–∞–¥–Ω—ñ", "rear", "–∑–∞–¥"]
        },
        "122881": {
            "–°–ª–µ–≤–∞": ["—Å–ª–µ–≤–∞", "–ª—ñ–≤–æ—Ä—É—á", "left", "–ª–µ–≤", "–ª—ñ–≤"],
            "–°–ø—Ä–∞–≤–∞": ["—Å–ø—Ä–∞–≤–∞", "–ø—Ä–∞–≤–æ—Ä—É—á", "right", "–ø—Ä–∞–≤"]
        },
        "250591": {
            "–ë–∞—Ä–∞–±–∞–Ω —Ç–æ—Ä–º–æ–∑–Ω–æ–π": ["–±–∞—Ä–∞–±–∞–Ω —Ç–æ—Ä–º–æ–∑–Ω–æ–π", "–±–∞—Ä–∞–±–∞–Ω"],
            "–†–µ–º–∫–æ–º–ø–ª–µ–∫—Ç —Å—É–ø–ø–æ—Ä—Ç–æ–≤": ["—Ä–µ–º–∫–æ–º–ø–ª–µ–∫—Ç —Å—É–ø–ø–æ—Ä—Ç–æ–≤", "—Ä–µ–º–∫–æ–º–ø–ª–µ–∫—Ç —Å—É–ø–ø–æ—Ä—Ç–∞"],
            "–†–µ–º–∫–æ–º–ø–ª–µ–∫—Ç –∫–æ–ª–æ–¥–æ–∫": ["—Ä–µ–º–∫–æ–º–ø–ª–µ–∫—Ç –∫–æ–ª–æ–¥–æ–∫", "—Ä–µ–º–∫–æ–º–ø–ª–µ–∫—Ç –∫–æ–ª–æ–¥–∫–∏"],
            "–ë–∞—á–æ–∫": ["–±–∞—á–æ–∫", "–±–∞—á–æ–∫ —Ç–æ—Ä–º–æ–∑–Ω–æ–π"],
            "–°—É–ø–ø–æ—Ä—Ç —Ç–æ—Ä–º–æ–∑–Ω–æ–π": ["—Å—É–ø–ø–æ—Ä—Ç —Ç–æ—Ä–º–æ–∑–Ω–æ–π", "—Å—É–ø–ø–æ—Ä—Ç"],
            "–î–∏—Å–∫ —Ç–æ—Ä–º–æ–∑–Ω–æ–π": ["–¥–∏—Å–∫ —Ç–æ—Ä–º–æ–∑–Ω–æ–π", "–¥–∏—Å–∫"],
            "–©–∏—Ç —Ç–æ—Ä–º–æ–∑–Ω–æ–≥–æ –¥–∏—Å–∫–∞": ["—â–∏—Ç —Ç–æ—Ä–º–æ–∑–Ω–æ–≥–æ –¥–∏—Å–∫–∞", "—â–∏—Ç"],
            "–®–ª–∞–Ω–≥–∏ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ": ["—à–ª–∞–Ω–≥–∏ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ", "—à–ª–∞–Ω–≥ —Ç–æ—Ä–º–æ–∑–Ω–æ–π", "—Ç–æ—Ä–º–æ–∑–Ω–æ–π —à–ª–∞–Ω–≥", "—Ç–æ—Ä–º–æ–∑–Ω—ã–π —à–ª–∞–Ω–≥", "—à–ª–∞–Ω–≥", "—à–ª–∞–Ω–≥ –≥–∞–ª—å–º—ñ–≤–Ω–∏–π", "–≥–∞–ª—å–º—ñ–≤–Ω–∏–π —à–ª–∞–Ω–≥"],
            "–¢—Ä—É–±–∫–∏ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ": ["—Ç—Ä—É–±–∫–∏ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ", "—Ç—Ä—É–±–∫–∞ —Ç–æ—Ä–º–æ–∑–Ω–∞—è", "—Ç—Ä—É–±–∫–∞", "—Ç—Ä—É–±–∫–∞ –≥–∞–ª—å–º—ñ–≤–Ω–∞", "—Ç—Ä—É–±–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –≥–∞–ª—å–º", "—Ç–æ—Ä–º–æ–∑–Ω–∞—è —Ç—Ä—É–±–∫–∞"]
        }
    },
    
    skipSideIfNotFound: true,
    
    determineValues: function(title) {
        if (!window.isScriptRunning) return null;
        const result = {};
        for (const [paramId, mappings] of Object.entries(this.parameters)) {
            for (const [value, keywords] of Object.entries(mappings)) {
                for (const keyword of keywords) {
                    if (title.includes(keyword)) {
                        console.log(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: "${value}" –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ${paramId} –≤ "${title}" (–∫–ª—é—á: "${keyword}")`);
                        result[paramId] = value;
                        break;
                    }
                }
                if (result[paramId]) break;
            }
        }
        
        if (!result["122881"] && !this.skipSideIfNotFound) {
            result["122881"] = ["–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞"];
            console.log(`‚Ñπ "–°—Ç–æ—Ä–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã: "–°–ª–µ–≤–∞" –∏ "–°–ø—Ä–∞–≤–∞".`);
        }
        
        return Object.keys(result).length > 0 ? result : null;
    },
    
    process: function() {
        console.log("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–¢–æ—Ä–º–æ–∑–Ω—ã–µ —à–ª–∞–Ω–≥–∏ –∏ —Ç—Ä—É–±–∫–∏'");
        const productName = document.querySelector("input[name='name']").value.toLowerCase();
        const params = this.determineValues(productName);
        if (!params) {
            console.log("‚ö† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.");
            window.goToNextProduct();
            return;
        }

        const paramIds = Object.keys(params);
        let index = 0;

        function addNext() {
            if (index >= paramIds.length) {
                window.goToNextProduct();
                return;
            }
            const paramId = paramIds[index];
            const value = params[paramId];
            
            if (Array.isArray(value)) {
                let valueIndex = 0;
                function addValue() {
                    if (valueIndex >= value.length) {
                        index++;
                        addNext();
                        return;
                    }
                    if (!window.checkIfParameterExists(paramId, value[valueIndex])) {
                        window.addParameter(paramId, value[valueIndex], () => {
                            valueIndex++;
                            addValue();
                        });
                    } else {
                        valueIndex++;
                        addValue();
                    }
                }
                addValue();
            } else {
                if (!window.checkIfParameterExists(paramId, value)) {
                    window.addParameter(paramId, value, () => {
                        index++;
                        addNext();
                    });
                } else {
                    index++;
                    addNext();
                }
            }
        }
        addNext();
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...
};


 "–ü—Ä–æ—Ç–∏–≤–æ—Ç—É–º–∞–Ω–Ω—ã–µ —Ñ–∞—Ä—ã": {
        parameters: {
            "122881": { // –°—Ç–æ—Ä–æ–Ω–∞
                "–õ–µ–≤—ã–µ": ["–ª–µ–≤—ã–µ", "–ª–µ–≤"],
                "–ü—Ä–∞–≤—ã–µ": ["–ø—Ä–∞–≤—ã–µ", "–ø—Ä–∞–≤"]
            }
        },
        determineValues: function(title) {
            const result = {};
            const lowerTitle = title.toLowerCase();
            
            // –ê–Ω–∞–ª–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            for (const [paramId, mappings] of Object.entries(this.parameters)) {
                for (const [value, keywords] of Object.entries(mappings)) {
                    if (keywords.some(kw => lowerTitle.includes(kw))) {
                        result[paramId] = value;
                        break;
                    }
                }
            }
            
            return Object.keys(result).length ? result : null;
        },
        process: function() {
            console.log("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ '–ü—Ä–æ—Ç–∏–≤–æ—Ç—É–º–∞–Ω–Ω—ã–µ —Ñ–∞—Ä—ã'");
            const productName = document.querySelector("input[name='name']").value.toLowerCase();
            const params = this.determineValues(productName);
            
            if (!params) {
                console.log("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏");
                window.goToNextProduct();
                return;
            }
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const paramIds = Object.keys(params);
            let index = 0;
            
            const addNext = () => {
                if (index >= paramIds.length) {
                    window.goToNextProduct();
                    return;
                }
                const paramId = paramIds[index];
                if (!window.checkIfParameterExists(paramId, params[paramId])) {
                    window.addParameter(paramId, params[paramId], () => {
                        index++;
                        addNext();
                    });
                } else {
                    index++;
                    addNext();
                }
            };
            addNext();
        }
    }
};


// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
if (typeof module !== 'undefined' && module.exports) {
    module.exports = categoryModules;
} else {
    window.categoryModules = categoryModules;
}
